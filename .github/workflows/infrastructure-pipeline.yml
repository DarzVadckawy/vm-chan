name: Infrastructure and Deployment Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  packages: write
  security-events: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Run Gosec Security Scanner
      uses: securego/gosec@master
      with:
        args: '-no-fail -fmt sarif -out results.sarif ./...'

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: results.sarif

  terraform:
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    if: github.ref == 'refs/heads/main'
    outputs:
      PUBLIC_IP: ${{ steps.tf-out.outputs.PUBLIC_IP }}
      PRIVATE_KEY: ${{ steps.tf-out.outputs.PRIVATE_KEY }}
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.0

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        working-directory: deployments/terraform
        run: terraform init

      - name: Terraform Plan
        working-directory: deployments/terraform
        run: |
          terraform plan -no-color \
            -var="key_name=${{ secrets.AWS_KEY_NAME }}" \
            -var="aws_region=${{ secrets.AWS_REGION }}"

      - name: Terraform Apply
        working-directory: deployments/terraform
        run: |
          terraform apply -auto-approve \
            -var="key_name=${{ secrets.AWS_KEY_NAME }}" \
            -var="aws_region=${{ secrets.AWS_REGION }}"

      - id: tf-out
        name: Export EC2 public IP and private key
        working-directory: deployments/terraform
        run: |
          echo "PUBLIC_IP=$(terraform output -raw public_ip)" >> $GITHUB_OUTPUT
          echo "PRIVATE_KEY<<EOF" >> $GITHUB_OUTPUT
          terraform output -raw private_key >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  ansible:
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - uses: actions/checkout@v4

      - name: Install Ansible and SSH client
        run: sudo apt-get update && sudo apt-get install -y ansible openssh-client

      - name: Prepare SSH key from Terraform
        run: |
          mkdir -p .ssh
          echo "${{ needs.terraform.outputs.PRIVATE_KEY }}" > .ssh/id_rsa
          chmod 600 .ssh/id_rsa

      - name: Render Ansible inventory
        run: |
          sed "s/\${PUBLIC_IP}/${{ needs.terraform.outputs.PUBLIC_IP }}/g" \
            deployments/ansible/inventory.tpl > inventory.ini

      - name: Wait for SSH to be ready
        run: |
          for i in {1..30}; do
            ssh -o StrictHostKeyChecking=no -i .ssh/id_rsa \
              ubuntu@${{ needs.terraform.outputs.PUBLIC_IP }} 'echo "SSH Ready"' && break || sleep 10
          done

      - name: Run Ansible playbook
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ansible-playbook -i inventory.ini deployments/ansible/site.yml

  build_push:
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    outputs:
      image: ${{ steps.image.outputs.image }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64  # Remove arm64 to speed up builds significantly
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - id: image
        name: Output image
        run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT

  deploy:
    runs-on: ubuntu-latest
    needs: [build_push, ansible, terraform]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Prepare SSH key from Terraform
        run: |
          mkdir -p .ssh
          echo "${{ needs.terraform.outputs.PRIVATE_KEY }}" > .ssh/id_rsa
          chmod 600 .ssh/id_rsa

      - name: Create/Update secrets in cluster
        run: |
          ssh -o StrictHostKeyChecking=no -i .ssh/id_rsa \
            ubuntu@${{ needs.terraform.outputs.PUBLIC_IP }} \
            "kubectl -n vmchan create secret generic vmchan-secrets \
            --from-literal=api_key='${{ secrets.API_KEY }}' \
            --dry-run=client -o yaml | kubectl apply -f -"

      - name: Deploy application to k3s
        env:
          PUBLIC_IP: ${{ needs.terraform.outputs.PUBLIC_IP }}
          IMAGE: ${{ needs.build_push.outputs.image }}
        run: |
          # Apply namespace
          cat deployments/k8s/namespace.yaml | ssh -o StrictHostKeyChecking=no -i .ssh/id_rsa ubuntu@${{ env.PUBLIC_IP }} 'kubectl apply -f -'
          
          # Apply service
          cat deployments/k8s/service.yaml | ssh -o StrictHostKeyChecking=no -i .ssh/id_rsa ubuntu@${{ env.PUBLIC_IP }} 'kubectl apply -f -'
          
          # Deploy application with correct image
          sed 's#ghcr.io/REPO_OWNER/REPO_NAME:{{GIT_SHA}}#${{ env.IMAGE }}#' deployments/k8s/app-deployment.yaml | ssh -o StrictHostKeyChecking=no -i .ssh/id_rsa ubuntu@${{ env.PUBLIC_IP }} 'kubectl apply -f -'
          
          # Wait for deployment rollout and show status
          ssh -o StrictHostKeyChecking=no -i .ssh/id_rsa ubuntu@${{ env.PUBLIC_IP }} '
            kubectl -n vmchan rollout status deployment/vm-chan --timeout=300s
            kubectl -n vmchan get pods,svc
          '

      - name: Display access information
        run: |
          echo "üöÄ Deployment completed successfully!"
          echo "üìç Application URL: http://${{ needs.terraform.outputs.PUBLIC_IP }}:30080"
          echo "üîç Health check: http://${{ needs.terraform.outputs.PUBLIC_IP }}:30080/healthz"
          echo "üìä SSH access: ssh -i ~/.ssh/your-key ubuntu@${{ needs.terraform.outputs.PUBLIC_IP }}"
